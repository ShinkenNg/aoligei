[{"D:\\www\\web\\power-design\\src\\uploader.tsx":"1","D:\\www\\web\\power-design\\src\\power-list\\component\\alert\\uploader.tsx":"2","D:\\www\\web\\power-design\\src\\power-list\\component\\columnSetting\\DndItem.tsx":"3","D:\\www\\web\\power-design\\src\\power-list\\component\\columnSetting\\uploader.tsx":"4","D:\\www\\web\\power-design\\src\\power-list\\component\\dropdown\\uploader.tsx":"5","D:\\www\\web\\power-design\\src\\power-list\\component\\ErrorBoundary.tsx":"6","D:\\www\\web\\power-design\\src\\power-list\\component\\indexColumn\\uploader.tsx":"7","D:\\www\\web\\power-design\\src\\power-list\\component\\intlContext\\uploader.tsx":"8","D:\\www\\web\\power-design\\src\\power-list\\component\\percent\\uploader.tsx":"9","D:\\www\\web\\power-design\\src\\power-list\\component\\percent\\util.ts":"10","D:\\www\\web\\power-design\\src\\power-list\\component\\status\\uploader.tsx":"11","D:\\www\\web\\power-design\\src\\power-list\\component\\toolBar\\DensityIcon.tsx":"12","D:\\www\\web\\power-design\\src\\power-list\\component\\toolBar\\FullscreenIcon.tsx":"13","D:\\www\\web\\power-design\\src\\power-list\\component\\toolBar\\uploader.tsx":"14","D:\\www\\web\\power-design\\src\\power-list\\component\\util.tsx":"15","D:\\www\\web\\power-design\\src\\power-list\\container.tsx":"16","D:\\www\\web\\power-design\\src\\power-list\\defaultRender.tsx":"17","D:\\www\\web\\power-design\\src\\power-list\\Form\\FormOption.tsx":"18","D:\\www\\web\\power-design\\src\\power-list\\Form\\uploader.tsx":"19","D:\\www\\web\\power-design\\src\\power-list\\uploader.tsx":"20","D:\\www\\web\\power-design\\src\\power-list\\locale\\en_US.tsx":"21","D:\\www\\web\\power-design\\src\\power-list\\locale\\es_ES.tsx":"22","D:\\www\\web\\power-design\\src\\power-list\\locale\\it_IT.tsx":"23","D:\\www\\web\\power-design\\src\\power-list\\locale\\ja_JP.tsx":"24","D:\\www\\web\\power-design\\src\\power-list\\locale\\ms_MY.tsx":"25","D:\\www\\web\\power-design\\src\\power-list\\locale\\ru_RU.tsx":"26","D:\\www\\web\\power-design\\src\\power-list\\locale\\vi_VN.tsx":"27","D:\\www\\web\\power-design\\src\\power-list\\locale\\zh_CN.tsx":"28","D:\\www\\web\\power-design\\src\\power-list\\locale\\zh_TW.tsx":"29","D:\\www\\web\\power-design\\src\\power-list\\Table.tsx":"30","D:\\www\\web\\power-design\\src\\power-list\\useFetchData.tsx":"31","D:\\www\\web\\power-design\\src\\sku\\index.ts":"32","D:\\www\\web\\power-design\\src\\sku\\SKU.tsx":"33","D:\\www\\web\\power-design\\src\\sku\\utils\\index.ts":"34"},{"size":64,"mtime":1595994105663,"results":"35","hashOfConfig":"36"},{"size":2339,"mtime":1593325773929,"results":"37","hashOfConfig":"36"},{"size":2781,"mtime":1593325773979,"results":"38","hashOfConfig":"36"},{"size":9238,"mtime":1593326714687,"results":"39","hashOfConfig":"36"},{"size":2156,"mtime":1595983467784,"results":"40","hashOfConfig":"36"},{"size":750,"mtime":1593325773876,"results":"41","hashOfConfig":"36"},{"size":778,"mtime":1593325774246,"results":"42","hashOfConfig":"36"},{"size":2335,"mtime":1593325774278,"results":"43","hashOfConfig":"36"},{"size":1124,"mtime":1593325774307,"results":"44","hashOfConfig":"36"},{"size":626,"mtime":1593325774326,"results":"45","hashOfConfig":"36"},{"size":868,"mtime":1593325774362,"results":"46","hashOfConfig":"36"},{"size":1363,"mtime":1593325774417,"results":"47","hashOfConfig":"36"},{"size":776,"mtime":1593325774458,"results":"48","hashOfConfig":"36"},{"size":5770,"mtime":1593325774606,"results":"49","hashOfConfig":"36"},{"size":7352,"mtime":1596000986380,"results":"50","hashOfConfig":"36"},{"size":1873,"mtime":1593325774757,"results":"51","hashOfConfig":"36"},{"size":6087,"mtime":1593325774847,"results":"52","hashOfConfig":"36"},{"size":1630,"mtime":1593325772869,"results":"53","hashOfConfig":"36"},{"size":21692,"mtime":1595930559215,"results":"54","hashOfConfig":"36"},{"size":1006,"mtime":1593657825784,"results":"55","hashOfConfig":"36"},{"size":966,"mtime":1593325774914,"results":"56","hashOfConfig":"36"},{"size":1043,"mtime":1593325774934,"results":"57","hashOfConfig":"36"},{"size":1022,"mtime":1593325774954,"results":"58","hashOfConfig":"36"},{"size":1032,"mtime":1593325774987,"results":"59","hashOfConfig":"36"},{"size":981,"mtime":1593325775013,"results":"60","hashOfConfig":"36"},{"size":1337,"mtime":1593325775041,"results":"61","hashOfConfig":"36"},{"size":1110,"mtime":1593325775058,"results":"62","hashOfConfig":"36"},{"size":966,"mtime":1593325775092,"results":"63","hashOfConfig":"36"},{"size":966,"mtime":1593325775115,"results":"64","hashOfConfig":"36"},{"size":30228,"mtime":1595410493215,"results":"65","hashOfConfig":"36"},{"size":5159,"mtime":1596001026082,"results":"66","hashOfConfig":"36"},{"size":63,"mtime":1595657092953,"results":"67","hashOfConfig":"36"},{"size":7706,"mtime":1596000923382,"results":"68","hashOfConfig":"36"},{"size":0,"mtime":1595319032205,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c1kosg",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":4,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\www\\web\\power-design\\src\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\alert\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\columnSetting\\DndItem.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\columnSetting\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\dropdown\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\ErrorBoundary.tsx",["140"],"import React, { ErrorInfo } from 'react';\nimport { Result } from 'antd';\n\nclass ErrorBoundary extends React.Component<{}, { hasError: boolean; errorInfo: string }> {\n  state = { hasError: false, errorInfo: '' };\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, errorInfo: error.message };\n  }\n\n  componentDidCatch(error: any, errorInfo: ErrorInfo) {\n    // You can also log the error to an error reporting service\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <Result status=\"error\" title=\"Something went wrong.\" extra={this.state.errorInfo} />;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","D:\\www\\web\\power-design\\src\\power-list\\component\\indexColumn\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\intlContext\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\percent\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\percent\\util.ts",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\status\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\toolBar\\DensityIcon.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\toolBar\\FullscreenIcon.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\toolBar\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\component\\util.tsx",["141","142"],"D:\\www\\web\\power-design\\src\\power-list\\container.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\defaultRender.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\Form\\FormOption.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\Form\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\uploader.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\en_US.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\es_ES.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\it_IT.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\ja_JP.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\ms_MY.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\ru_RU.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\vi_VN.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\zh_CN.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\locale\\zh_TW.tsx",[],"D:\\www\\web\\power-design\\src\\power-list\\Table.tsx",["143"],"import './index.less';\n\nimport React, { useEffect, CSSProperties, useRef, useState, ReactNode } from 'react';\nimport { Table, ConfigProvider, Card, Space, Typography, Empty, Tooltip } from 'antd';\nimport classNames from 'classnames';\nimport useMergeValue from 'use-merge-value';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { stringify } from 'use-json-comparison';\nimport { ColumnsType, TablePaginationConfig, TableProps, ColumnType } from 'antd/es/table';\nimport { FormItemProps, FormProps, FormInstance } from 'antd/es/form';\nimport { TableCurrentDataSource, SorterResult } from 'antd/lib/table/interface';\nimport { ConfigConsumer, ConfigConsumerProps } from 'antd/lib/config-provider';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { noteOnce } from 'rc-util/lib/warning';\nimport { IntlProvider, IntlConsumer, IntlType, useIntl } from './component/intlContext';\nimport useFetchData, { UseFetchDataAction, RequestData } from './useFetchData';\nimport Container from './container';\nimport Toolbar, { OptionConfig, ToolBarProps } from './component/toolBar';\nimport Alert from './component/alert';\nimport FormSearch, { SearchConfig, TableFormItem } from './Form';\nimport { StatusType } from './component/status';\nimport get, {\n  parsingText,\n  // parsingValueEnumToArray,\n  checkUndefinedOrNull,\n  useDeepCompareEffect,\n  genColumnKey,\n  removeObjectNull,\n  ObjToMap,\n  reduceWidth,\n} from './component/util';\nimport defaultRenderText, {\n  PowerColumnsValueType,\n  PowerColumnsValueTypeFunction,\n} from './defaultRender';\nimport { DensitySize } from './component/toolBar/DensityIcon';\nimport ErrorBoundary from './component/ErrorBoundary';\n\ntype TableRowSelection = TableProps<any>['rowSelection'];\n\nexport interface ActionType {\n  reload: (resetPageIndex?: boolean) => void;\n  reloadAndRest: () => void;\n  fetchMore: () => void;\n  reset: () => void;\n  clearSelected: () => void;\n}\n\nexport interface ColumnsState {\n  show?: boolean;\n  fixed?: 'right' | 'left' | undefined;\n}\n\nexport type ValueEnumObj = {\n  [key: string]:\n    | {\n        text: ReactNode;\n        status: StatusType;\n      }\n    | ReactNode;\n};\n\nexport type ValueEnumMap = Map<\n  React.ReactText,\n  | {\n      text: ReactNode;\n      status: StatusType;\n    }\n  | ReactNode\n>;\n\nexport interface PowerColumnType<T = unknown>\n  extends Omit<ColumnType<T>, 'render' | 'children' | 'title'>,\n    Partial<Omit<FormItemProps, 'children'>> {\n  index?: number;\n  title?: ReactNode | ((config: PowerColumnType<T>, type: PowerListTypes) => ReactNode);\n  /**\n   * 自定义 render\n   */\n  render?: (\n    text: React.ReactNode,\n    record: T,\n    index: number,\n    action: UseFetchDataAction<RequestData<T>>,\n  ) => React.ReactNode | React.ReactNode[];\n\n  /**\n   * 自定义 render，但是需要返回 string\n   */\n  renderText?: (\n    text: any,\n    record: T,\n    index: number,\n    action: UseFetchDataAction<RequestData<T>>,\n  ) => any;\n\n  /**\n   * 自定义搜索 form 的输入\n   */\n  renderFormItem?: (\n    item: PowerColumns<T>,\n    config: {\n      value?: any;\n      onChange?: (value: any) => void;\n      onSelect?: (value: any) => void;\n      type: PowerListTypes;\n      defaultRender: (newItem: PowerColumns<any>) => JSX.Element | null;\n    },\n    form: Omit<FormInstance, 'scrollToField' | '__INTERNAL__'>,\n  ) => JSX.Element | false | null;\n\n  /**\n   * 表单字段名\n   * 特殊场景中，不可复用dataIndex\n   * */\n  formItemName?: string;\n\n  /**\n   * 搜索表单的 props\n   */\n  formItemProps?: { [prop: string]: any };\n\n  /**\n   * 搜索表单的默认值\n   */\n  initialValue?: any;\n\n  /**\n   * 是否缩略\n   */\n  ellipsis?: boolean;\n  /**\n   * 是否拷贝\n   */\n  copyable?: boolean;\n\n  /**\n   * 值的类型\n   */\n  valueType?: PowerColumnsValueType | PowerColumnsValueTypeFunction<T>;\n\n  /**\n   * 值的枚举，如果存在枚举，Search 中会生成 select\n   */\n  valueEnum?: ValueEnumMap | ValueEnumObj;\n\n  /**\n   * 在查询表单中隐藏\n   */\n  hideInSearch?: boolean;\n\n  /**\n   * 在 table 中隐藏\n   */\n  hideInTable?: boolean;\n\n  /**\n   * 在新建表单中删除\n   */\n  hideInForm?: boolean;\n\n  /**\n   * form 的排序\n   */\n  order?: number;\n}\n\nexport interface PowerColumnGroupType<RecordType> extends PowerColumnType<RecordType> {\n  children: PowerColumns<RecordType>;\n}\n\nexport type PowerColumns<T = {}> = PowerColumnGroupType<T> | PowerColumnType<T>;\n\n// table 支持的变形，还未完全支持完毕\nexport type PowerListTypes = 'form' | 'list' | 'table' | 'cardList' | undefined;\n\nexport interface PowerListProps<T, U extends { [key: string]: any }>\n  extends Omit<TableProps<T>, 'columns' | 'rowSelection'> {\n  columns?: PowerColumns<T>[];\n\n  params?: U;\n\n  columnsStateMap?: {\n    [key: string]: ColumnsState;\n  };\n\n  onColumnsStateChange?: (map: { [key: string]: ColumnsState }) => void;\n\n  onSizeChange?: (size: DensitySize) => void;\n\n  /**\n   * 一个获得 dataSource 的方法\n   */\n  request?: (\n    params: U & {\n      pageSize?: number;\n      current?: number;\n    },\n    sort: {\n      [key: string]: 'ascend' | 'descend';\n    },\n    filter: { [key: string]: React.ReactText[] },\n  ) => Promise<RequestData<T>>;\n\n  /**\n   * 对数据进行一些处理\n   */\n  postData?: (data: any[]) => any[];\n  /**\n   * 默认的数据\n   */\n  defaultData?: T[];\n\n  /**\n   * 初始化的参数，可以操作 table\n   */\n  actionRef?: React.MutableRefObject<ActionType | undefined> | ((actionRef: ActionType) => void);\n\n  /**\n   * 操作自带的 form\n   */\n  formRef?: TableFormItem<T>['formRef'];\n  /**\n   * 渲染操作栏\n   */\n  toolBarRender?: ToolBarProps<T>['toolBarRender'] | false;\n\n  /**\n   * 数据加载完成后触发\n   */\n  onLoad?: (dataSource: T[]) => void;\n\n  /**\n   * 数据加载失败时触发\n   */\n  onRequestError?: (e: Error) => void;\n\n  /**\n   * 给封装的 table 的 className\n   */\n  tableClassName?: string;\n\n  /**\n   * 给封装的 table 的 style\n   */\n  tableStyle?: CSSProperties;\n\n  /**\n   * 左上角的 title\n   */\n  headerTitle?: React.ReactNode;\n\n  /**\n   * 默认的操作栏配置\n   */\n  options?: OptionConfig<T> | false;\n  /**\n   * 是否显示搜索表单\n   */\n  search?: boolean | SearchConfig;\n\n  /**\n   * type=\"form\" 和 搜索表单 的 Form 配置\n   * 基本配置与 antd Form 相同\n   *  但是劫持了 form 的配置\n   */\n  form?: Omit<FormProps, 'form'>;\n  /**\n   * 如何格式化日期\n   * 暂时只支持 moment\n   * string 会格式化为 YYYY-DD-MM\n   * number 代表时间戳\n   */\n  dateFormatter?: 'string' | 'number' | false;\n  /**\n   * 格式化搜索表单提交数据\n   */\n  beforeSearchSubmit?: (params: Partial<T>) => Partial<T>;\n  /**\n   * 自定义 table 的 alert\n   * 设置或者返回false 即可关闭\n   */\n  tableAlertRender?:\n    | ((props: {\n        intl: IntlType;\n        selectedRowKeys: (string | number)[];\n        selectedRows: T[];\n      }) => React.ReactNode)\n    | false;\n  /**\n   * 自定义 table 的 alert 的操作\n   * 设置或者返回false 即可关闭\n   */\n  tableAlertOptionRender?:\n    | ((props: { intl: IntlType; onCleanSelected: () => void }) => React.ReactNode)\n    | false;\n\n  rowSelection?: TableProps<T>['rowSelection'] | false;\n\n  style?: React.CSSProperties;\n\n  /**\n   * 支持 PowerList 的类型\n   */\n  type?: PowerListTypes;\n\n  /**\n   * 提交表单时触发\n   */\n  onSubmit?: (params: U) => void;\n\n  /**\n   * 重置表单时触发\n   */\n  onReset?: () => void;\n\n  /**\n   * 空值时显示\n   */\n  columnEmptyText?: ColumnEmptyText;\n}\n\nconst mergePagination = <T extends any[], U>(\n  pagination: TablePaginationConfig | boolean | undefined = {},\n  action: UseFetchDataAction<RequestData<T>>,\n  intl: IntlType,\n): TablePaginationConfig | false | undefined => {\n  if (pagination === false) {\n    return {};\n  }\n  let defaultPagination: TablePaginationConfig | {} = pagination || {};\n  const { current, pageSize } = action;\n  if (pagination === true) {\n    defaultPagination = {};\n  }\n  return {\n    showTotal: (all, range) =>\n      `${intl.getMessage('pagination.total.range', '第')} ${range[0]}-${range[1]} ${intl.getMessage(\n        'pagination.total.total',\n        '条/总共',\n      )} ${all} ${intl.getMessage('pagination.total.item', '条')}`,\n    showSizeChanger: true,\n    total: action.total,\n    ...(defaultPagination as TablePaginationConfig),\n    current,\n    pageSize,\n    onChange: (page: number, newPageSize?: number) => {\n      const purePathName = (window.location.pathname || '').replace(/\\//g, '');\n\n      // pageSize 改变之后就没必要切换页码\n      if (newPageSize !== pageSize && current !== page) {\n        action.setPageInfo({ pageSize, page });\n      } else {\n        if (newPageSize !== pageSize) {\n          action.setPageInfo({ pageSize: newPageSize });\n        }\n        if (current !== page) {\n          action.setPageInfo({ page });\n        }\n      }\n\n      const pageInfo = {\n        pageSize: newPageSize,\n        current: page,\n      };\n      sessionStorage.setItem(purePathName, JSON.stringify(pageInfo));\n\n      const { onChange } = pagination as TablePaginationConfig;\n      if (onChange) {\n        onChange(page, newPageSize || 20);\n      }\n    },\n\n    onShowSizeChange: (page: number, showPageSize: number) => {\n      action.setPageInfo({\n        pageSize: showPageSize,\n        page,\n      });\n      const { onShowSizeChange } = pagination as TablePaginationConfig;\n      if (onShowSizeChange) {\n        onShowSizeChange(page, showPageSize || 20);\n      }\n    },\n  };\n};\n\nexport type ColumnEmptyText = string | false;\n\ninterface ColumRenderInterface<T> {\n  item: PowerColumns<T>;\n  text: any;\n  row: T;\n  index: number;\n  columnEmptyText?: ColumnEmptyText;\n}\n\n/**\n * 生成 Ellipsis 的 tooltip\n * @param dom\n * @param item\n * @param text\n */\nconst genEllipsis = (dom: React.ReactNode, item: PowerColumns<any>, text: string) => {\n  if (!item.ellipsis) {\n    return dom;\n  }\n  return (\n    <Tooltip title={text}>\n      <div>{dom}</div>\n    </Tooltip>\n  );\n};\n\nconst genCopyable = (dom: React.ReactNode, item: PowerColumns<any>) => {\n  if (item.copyable || item.ellipsis) {\n    return (\n      <Typography.Paragraph\n        style={{\n          width: reduceWidth(item.width),\n          margin: 0,\n          padding: 0,\n        }}\n        copyable={item.copyable}\n        ellipsis={item.ellipsis}\n      >\n        {dom}\n      </Typography.Paragraph>\n    );\n  }\n  return dom;\n};\n\n/**\n * 这个组件负责单元格的具体渲染\n * @param param0\n */\nconst columRender = <T, U = any>({\n  item,\n  text,\n  row,\n  index,\n  columnEmptyText,\n}: ColumRenderInterface<T>): any => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const counter = Container.useContainer();\n  const { action } = counter;\n  const { renderText = (val: any) => val, valueEnum = {} } = item;\n  if (!action.current) {\n    return null;\n  }\n\n  const renderTextStr = renderText(\n    parsingText(text, ObjToMap(valueEnum)),\n    row,\n    index,\n    action.current,\n  );\n  const textDom = defaultRenderText<T, {}>(\n    renderTextStr,\n    item.valueType || 'text',\n    index,\n    row,\n    columnEmptyText,\n  );\n\n  const dom: React.ReactNode = genEllipsis(\n    genCopyable(textDom, item),\n    item,\n    renderText(parsingText(text, ObjToMap(valueEnum), true), row, index, action.current),\n  );\n\n  if (item.render) {\n    const renderDom = item.render(dom, row, index, action.current);\n\n    // 如果是合并单元格的，直接返回对象\n    if (\n      renderDom &&\n      typeof renderDom === 'object' &&\n      (renderDom as { props: { colSpan: number } }).props &&\n      (renderDom as { props: { colSpan: number } }).props.colSpan\n    ) {\n      return renderDom;\n    }\n\n    if (renderDom && item.valueType === 'option' && Array.isArray(renderDom)) {\n      return <Space>{renderDom}</Space>;\n    }\n    return renderDom as React.ReactNode;\n  }\n  return checkUndefinedOrNull(dom) ? dom : null;\n};\n\n/**\n * 转化 columns 到 power list 的格式\n * 主要是 render 方法的自行实现\n * @param columns\n * @param map\n * @param columnEmptyText\n */\nconst genColumnList = <T, U = {}>(\n  columns: PowerColumns<T>[],\n  map: {\n    [key: string]: ColumnsState;\n  },\n  columnEmptyText?: ColumnEmptyText,\n): (ColumnsType<T>[number] & { index?: number })[] =>\n  (columns\n    .map((item) => {\n      const { title } = item;\n      return {\n        ...item,\n        title: title && typeof title === 'function' ? title(item, 'table') : title,\n        valueEnum: ObjToMap(item.valueEnum),\n      };\n    })\n    .map((item, columnsIndex) => {\n      const { key, dataIndex } = item;\n      const columnKey = genColumnKey(key, dataIndex, columnsIndex);\n      const config = columnKey ? map[columnKey] || { fixed: item.fixed } : { fixed: item.fixed };\n      const tempColumns = {\n        onFilter: (value: string, record: T) => {\n          let recordElement = get(record, item.dataIndex || '');\n          if (typeof recordElement === 'number') {\n            recordElement = recordElement.toString();\n          }\n          const itemValue = String(recordElement || '') as string;\n          return String(itemValue) === String(value);\n        },\n        index: columnsIndex,\n        // filters: parsingValueEnumToArray(item.valueEnum).filter(\n        //   (valueItem) => valueItem && valueItem.value !== 'all',\n        // ),\n        ...item,\n        ellipsis: false,\n        fixed: config.fixed,\n        width: item.width || (item.fixed ? 200 : undefined),\n        // @ts-ignore\n        children: item.children ? genColumnList(item.children, map, columnEmptyText) : undefined,\n        render: (text: any, row: T, index: number) =>\n          columRender<T>({ item, text, row, index, columnEmptyText }),\n      };\n      if (!tempColumns.children || !tempColumns.children.length) {\n        delete tempColumns.children;\n      }\n      if (!tempColumns.dataIndex) {\n        delete tempColumns.dataIndex;\n      }\n      // 如果存在点连接.符号\n      if (tempColumns.dataIndex?.toString().includes('.')) {\n        // 转为 ant design table接受的格式\n        tempColumns.dataIndex = tempColumns.dataIndex?.toString().split('.');\n      }\n      if (!tempColumns.filters || !tempColumns.filters.length) {\n        delete tempColumns.filters;\n      }\n      return tempColumns;\n    })\n    .filter((item) => !item.hideInTable) as unknown) as ColumnsType<T>[number] &\n    {\n      index?: number;\n    }[];\n\n/**\n * 🏆 Use Ant Design Table like a Pro!\n * 更快 更好 更方便\n * @param props\n */\nconst PowerList = <T extends {}, U extends object>(\n  props: PowerListProps<T, U> & {\n    defaultClassName: string;\n  },\n) => {\n  const {\n    request,\n    className: propsClassName,\n    params = {},\n    defaultData = [],\n    headerTitle,\n    postData,\n    pagination: propsPagination,\n    actionRef,\n    columns: propsColumns = [],\n    toolBarRender = () => [],\n    onLoad,\n    onRequestError,\n    style,\n    tableStyle,\n    tableClassName,\n    columnsStateMap,\n    onColumnsStateChange,\n    options,\n    search = true,\n    rowSelection: propsRowSelection = false,\n    beforeSearchSubmit = (searchParams: Partial<U>) => searchParams,\n    tableAlertRender,\n    defaultClassName,\n    formRef,\n    type = 'table',\n    onReset = () => {},\n    columnEmptyText = '-',\n    ...rest\n  } = props;\n\n  const [selectedRowKeys, setSelectedRowKeys] = useMergeValue<React.ReactText[]>([], {\n    value: propsRowSelection ? propsRowSelection.selectedRowKeys : undefined,\n  });\n  const [formSearch, setFormSearch] = useState<{}>(() => rest.form?.initialValues);\n  const [selectedRows, setSelectedRows] = useState<T[]>([]);\n  const [dataSource, setDataSource] = useState<T[]>([]);\n  const [proFilter, setProFilter] = useState<{\n    [key: string]: React.ReactText[];\n  }>({});\n  const [proSort, setProSort] = useState<{\n    [key: string]: 'ascend' | 'descend';\n  }>({});\n  const rootRef = useRef<HTMLDivElement>(null);\n  const fullScreen = useRef<() => void>();\n\n  /**\n   * 需要初始化 不然默认可能报错\n   * 这里取了 defaultCurrent 和 current\n   * 为了保证不会重复刷新\n   */\n  const fetchPagination =\n    typeof propsPagination === 'object'\n      ? (propsPagination as TablePaginationConfig)\n      : { defaultCurrent: 1, defaultPageSize: 20, pageSize: 20, current: 1 };\n\n  const action = useFetchData(\n    async ({ pageSize, current }) => {\n      if (!request) {\n        return ({\n          data: props.dataSource || [],\n          success: true,\n        } as unknown) as RequestData<T>;\n      }\n      const msg = await request(\n        {\n          page: current,\n          pageSize,\n          ...formSearch,\n\n          ...params,\n        } as U,\n        proSort,\n        proFilter,\n      );\n      if (postData) {\n        return { ...msg, data: postData(msg.data) };\n      }\n      return msg;\n    },\n    defaultData,\n    {\n      defaultCurrent: fetchPagination.current || fetchPagination.defaultCurrent,\n      defaultPageSize: fetchPagination.pageSize || fetchPagination.defaultPageSize,\n      onLoad,\n      onRequestError,\n      effects: [stringify(params), stringify(formSearch), stringify(proFilter), stringify(proSort)],\n    },\n  );\n\n  useEffect(() => {\n    fullScreen.current = () => {\n      if (!rootRef.current || !document.fullscreenEnabled) {\n        return;\n      }\n      if (document.fullscreenElement) {\n        document.exitFullscreen();\n      } else {\n        rootRef.current.requestFullscreen();\n      }\n    };\n  }, [rootRef.current]);\n\n  action.fullScreen = fullScreen.current;\n\n  const intl = useIntl();\n\n  const pagination =\n    propsPagination !== false && mergePagination<T[], {}>(propsPagination, action, intl);\n\n  const counter = Container.useContainer();\n\n  const onCleanSelected = () => {\n    if (propsRowSelection && propsRowSelection.onChange) {\n      propsRowSelection.onChange([], []);\n    }\n    setSelectedRowKeys([]);\n    setSelectedRows([]);\n  };\n\n  useEffect(() => {\n    // 数据源更新时 取消所有选中项\n    // onCleanSelected();\n    setDataSource(request ? (action.dataSource as T[]) : props.dataSource || []);\n  }, [props.dataSource, action.dataSource]);\n\n  /**\n   *  保存一下 propsColumns\n   *  生成 form 需要用\n   */\n  useDeepCompareEffect(() => {\n    counter.setPowerColumns(propsColumns);\n  }, [propsColumns]);\n\n  counter.setAction(action);\n\n  /**\n   * 这里生成action的映射，保证 action 总是使用的最新\n   * 只需要渲染一次即可\n   * 同时确定销毁之前，能保存页面信息到session中\n   */\n  useEffect(() => {\n    const userAction: ActionType = {\n      reload: async (resetPageIndex?: boolean) => {\n        const {\n          action: { current },\n        } = counter;\n        if (!current) {\n          return;\n        }\n        noteOnce(!!resetPageIndex, ' reload 的 resetPageIndex 将会失效，建议使用 reloadAndRest。');\n        noteOnce(\n          !!resetPageIndex,\n          'reload resetPageIndex will remove and reloadAndRest is recommended.',\n        );\n\n        // 如果为 true，回到第一页\n        if (resetPageIndex) {\n          await current.resetPageIndex();\n        }\n        await current.reload();\n      },\n      reloadAndRest: async () => {\n        const {\n          action: { current },\n        } = counter;\n        if (!current) {\n          return;\n        }\n        // reload 之后大概率会切换数据，清空一下选择。\n        onCleanSelected();\n        // 如果为 true，回到第一页\n        await current.resetPageIndex();\n        await current.reload();\n      },\n      fetchMore: async () => {\n        const {\n          action: { current },\n        } = counter;\n        if (!current) {\n          return;\n        }\n        await current.fetchMore();\n      },\n      reset: () => {\n        const {\n          action: { current },\n        } = counter;\n        if (!current) {\n          return;\n        }\n        current.reset();\n      },\n      clearSelected: () => onCleanSelected(),\n    };\n    if (actionRef && typeof actionRef === 'function') {\n      actionRef(userAction);\n    }\n    if (actionRef && typeof actionRef !== 'function') {\n      actionRef.current = userAction;\n    }\n\n    const purePathName = (window.location.pathname || '').replace(/\\//g, '');\n\n    const sessionPageInfo = sessionStorage.getItem(purePathName);\n    if (sessionPageInfo) {\n      try {\n        const cachePageInfo = JSON.parse(sessionPageInfo);\n        if (cachePageInfo.current > 1) {\n          // 当页码需要恢复\n          action.setPageInfo({\n            page: cachePageInfo.current,\n            pageSize: cachePageInfo.pageSize,\n          });\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }, []);\n\n  /**\n   * Table Column 变化的时候更新一下，这个参数将会用于渲染\n   */\n  useDeepCompareEffect(() => {\n    const tableColumn = genColumnList<T>(propsColumns, counter.columnsMap, columnEmptyText);\n    if (tableColumn && tableColumn.length > 0) {\n      counter.setColumns(tableColumn);\n      // 重新生成key的字符串用于排序\n      counter.setSortKeyColumns(\n        tableColumn.map((item, index) => {\n          const key =\n            genColumnKey(item.key, (item as PowerColumnType).dataIndex, index) || `${index}`;\n          return `${key}_${item.index}`;\n        }),\n      );\n    }\n  }, [propsColumns]);\n\n  /**\n   * 这里主要是为了排序，为了保证更新及时，每次都重新计算\n   */\n  useDeepCompareEffect(() => {\n    const keys = counter.sortKeyColumns.join(',');\n    let tableColumn = genColumnList<T>(propsColumns, counter.columnsMap, columnEmptyText);\n    if (keys.length > 0) {\n      // 用于可视化的排序\n      tableColumn = tableColumn.sort((a, b) => {\n        const { fixed: aFixed, index: aIndex } = a;\n        const { fixed: bFixed, index: bIndex } = b;\n        if (\n          (aFixed === 'left' && bFixed !== 'left') ||\n          (bFixed === 'right' && aFixed !== 'right')\n        ) {\n          return -2;\n        }\n        if (\n          (bFixed === 'left' && aFixed !== 'left') ||\n          (aFixed === 'right' && bFixed !== 'right')\n        ) {\n          return 2;\n        }\n        // 如果没有index，在 dataIndex 或者 key 不存在的时候他会报错\n        const aKey = `${genColumnKey(a.key, (a as PowerColumnType).dataIndex, aIndex)}_${aIndex}`;\n        const bKey = `${genColumnKey(b.key, (b as PowerColumnType).dataIndex, bIndex)}_${bIndex}`;\n        return keys.indexOf(aKey) - keys.indexOf(bKey);\n      });\n    }\n    if (tableColumn && tableColumn.length > 0) {\n      counter.setColumns(tableColumn);\n    }\n  }, [counter.columnsMap, counter.sortKeyColumns.join('-')]);\n\n  /**\n   * 同步 Pagination，支持受控的 页码 和 pageSize\n   */\n  useDeepCompareEffect(() => {\n    if (propsPagination && propsPagination.current && propsPagination.pageSize) {\n      action.setPageInfo({\n        pageSize: propsPagination.pageSize,\n        page: propsPagination.current,\n      });\n    }\n  }, [propsPagination]);\n\n  // 映射 selectedRowKeys 与 selectedRow\n  useEffect(() => {\n    if (action.loading !== false || propsRowSelection === false) {\n      return;\n    }\n    const tableKey = rest.rowKey;\n\n    // dataSource maybe is a null\n    // eg: api has 404 error\n    const duplicateRemoveMap = new Map();\n    if (Array.isArray(dataSource)) {\n      // 根据当前选中和当前的所有数据计算选中的行\n      // 因为防止翻页以后丢失，所有还增加了当前选择选中的\n      const rows = [...dataSource, ...selectedRows].filter((item, index) => {\n        let rowKey = tableKey;\n        if (!tableKey) {\n          return (selectedRowKeys as any).includes(index);\n        }\n        if (typeof tableKey === 'function') {\n          rowKey = tableKey(item, index) as string;\n        } else {\n          rowKey = item[tableKey];\n        }\n        if (duplicateRemoveMap.has(rowKey)) {\n          return false;\n        }\n        duplicateRemoveMap.set(rowKey, true);\n        return (selectedRowKeys as any).includes(rowKey);\n      });\n      setSelectedRows(rows);\n      return;\n    }\n    setSelectedRows([]);\n  }, [selectedRowKeys.join('-'), action.loading, propsRowSelection === false]);\n\n  const rowSelection: TableRowSelection = {\n    selectedRowKeys,\n    ...propsRowSelection,\n    onChange: (keys, rows) => {\n      if (propsRowSelection && propsRowSelection.onChange) {\n        propsRowSelection.onChange(keys, rows);\n      }\n      setSelectedRowKeys([...keys]);\n    },\n  };\n\n  useEffect(() => {\n    counter.setTableSize(rest.size || 'middle');\n  }, [rest.size]);\n\n  if (counter.columns.length < 1) {\n    return (\n      <Card bordered={false} bodyStyle={{ padding: 50 }}>\n        <Empty />\n      </Card>\n    );\n  }\n\n  const className = classNames(defaultClassName, propsClassName);\n\n  return (\n    <ConfigProvider\n      getPopupContainer={() => ((rootRef.current || document.body) as any) as HTMLElement}\n    >\n      <div className={className} id=\"ant-design-pro-table\" style={style} ref={rootRef}>\n        {(search || type === 'form') && (\n          <FormSearch<U>\n            {...rest}\n            type={props.type}\n            formRef={formRef}\n            onSubmit={(value) => {\n              if (type !== 'form') {\n                setFormSearch(\n                  beforeSearchSubmit({\n                    ...value,\n                    _timestamp: Date.now(),\n                  }),\n                );\n                // back first page\n                action.resetPageIndex();\n              }\n\n              if (props.onSubmit) {\n                props.onSubmit(value);\n              }\n            }}\n            onReset={() => {\n              setFormSearch(beforeSearchSubmit({}));\n              // back first page\n              action.resetPageIndex();\n              onReset();\n            }}\n            dateFormatter={rest.dateFormatter}\n            search={search}\n          />\n        )}\n\n        {type !== 'form' && (\n          <Card\n            bordered={false}\n            style={{\n              height: '100%',\n            }}\n            bodyStyle={{\n              padding: 0,\n            }}\n          >\n            {toolBarRender !== false && (options !== false || headerTitle || toolBarRender) && (\n              // if options= false & headerTitle=== false, hide Toolbar\n              <Toolbar<T>\n                options={options}\n                headerTitle={headerTitle}\n                action={action}\n                onSearch={(keyword) => {\n                  if (options && options.search) {\n                    const { name = 'keyword' } =\n                      options.search === true\n                        ? {\n                            name: 'keyword',\n                          }\n                        : options.search;\n                    setFormSearch({\n                      [name]: keyword,\n                      ...formSearch,\n                    });\n                  }\n                }}\n                selectedRows={selectedRows}\n                selectedRowKeys={selectedRowKeys}\n                toolBarRender={toolBarRender}\n              />\n            )}\n            {propsRowSelection !== false && (\n              <Alert<T>\n                selectedRowKeys={selectedRowKeys}\n                selectedRows={selectedRows}\n                onCleanSelected={onCleanSelected}\n                alertOptionRender={rest.tableAlertOptionRender}\n                alertInfoRender={tableAlertRender}\n              />\n            )}\n            <Table<T>\n              {...rest}\n              size={counter.tableSize}\n              scroll={{ x: 'max-content' }}\n              rowSelection={!propsRowSelection ? undefined : rowSelection}\n              className={tableClassName}\n              style={tableStyle}\n              columns={counter.columns.filter((item) => {\n                // 删掉不应该显示的\n                const { key, dataIndex } = item;\n                const columnKey = genColumnKey(key, dataIndex);\n                if (!columnKey) {\n                  return true;\n                }\n                const config = counter.columnsMap[columnKey];\n                return !(config && config.show === false);\n              })}\n              loading={action.loading || props.loading}\n              dataSource={dataSource}\n              pagination={pagination}\n              onChange={(\n                changePagination: TablePaginationConfig,\n                filters: {\n                  [string: string]: React.ReactText[] | null;\n                },\n                sorter: SorterResult<T> | SorterResult<T>[],\n                extra: TableCurrentDataSource<T>,\n              ) => {\n                if (rest.onChange) {\n                  rest.onChange(changePagination, filters, sorter, extra);\n                }\n\n                // 制造筛选的数据\n                setProFilter(removeObjectNull(filters));\n\n                // 制造一个排序的数据\n                if (Array.isArray(sorter)) {\n                  const data = sorter.reduce<{\n                    [key: string]: any;\n                  }>((pre, value) => {\n                    if (!value.order) {\n                      return pre;\n                    }\n                    return {\n                      ...pre,\n                      [`${value.field}`]: value.order,\n                    };\n                  }, {});\n                  setProSort(data);\n                } else if (sorter.order) {\n                  setProSort({ [`${sorter.field}`]: sorter.order });\n                }\n              }}\n            />\n          </Card>\n        )}\n      </div>\n    </ConfigProvider>\n  );\n};\n\n/**\n * 🏆 Use Ant Design Table like a Pro!\n * 更快 更好 更方便\n * @param props\n */\nconst ProviderWarp = <T, U extends { [key: string]: any } = {}>(props: PowerListProps<T, U>) => (\n  <Container.Provider initialState={props}>\n    <ConfigConsumer>\n      {({ getPrefixCls }: ConfigConsumerProps) => (\n        <IntlConsumer>\n          {(value) => (\n            <IntlProvider value={value}>\n              <ErrorBoundary>\n                <PowerList defaultClassName={getPrefixCls('pro-table')} {...props} />\n              </ErrorBoundary>\n            </IntlProvider>\n          )}\n        </IntlConsumer>\n      )}\n    </ConfigConsumer>\n  </Container.Provider>\n);\n\nexport default ProviderWarp;\n","D:\\www\\web\\power-design\\src\\power-list\\useFetchData.tsx",["144","145","146","147"],"D:\\www\\web\\power-design\\src\\sku\\index.ts",[],"D:\\www\\web\\power-design\\src\\sku\\SKU.tsx",["148"],"D:\\www\\web\\power-design\\src\\sku\\utils\\index.ts",[],{"ruleId":"149","severity":1,"message":"150","line":13,"column":5,"nodeType":"151","messageId":"152","endLine":13,"endColumn":16},{"ruleId":"153","severity":2,"message":"154","line":205,"column":9,"nodeType":"155","messageId":"156","endLine":205,"endColumn":30},{"ruleId":"153","severity":2,"message":"157","line":207,"column":9,"nodeType":"155","messageId":"156","endLine":207,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":790,"column":9,"nodeType":"151","messageId":"152","endLine":790,"endColumn":22},{"ruleId":"158","severity":2,"message":"159","line":10,"column":5,"nodeType":"160","messageId":"161","endLine":10,"endColumn":17,"fix":"162"},{"ruleId":"158","severity":2,"message":"159","line":12,"column":5,"nodeType":"160","messageId":"161","endLine":12,"endColumn":17,"fix":"163"},{"ruleId":"153","severity":2,"message":"164","line":90,"column":24,"nodeType":"155","messageId":"156","endLine":90,"endColumn":36},{"ruleId":"153","severity":2,"message":"165","line":90,"column":38,"nodeType":"155","messageId":"156","endLine":90,"endColumn":47},{"ruleId":"166","severity":2,"message":"167","line":184,"column":40,"nodeType":"168","messageId":"169","endLine":184,"endColumn":60,"fix":"170"},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/naming-convention","Variable name `_deps` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","Identifier","doesNotMatchFormat","Variable name `_wait` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","spaced-comment","Expected exception block, space or tab after '//' in comment.","Line","expectedExceptionAfter",{"range":"171","text":"172"},{"range":"173","text":"172"},"Variable name `current_page` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","Variable name `last_page` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","no-unneeded-ternary","Unnecessary use of conditional expression for default assignment.","ConditionalExpression","unnecessaryConditionalAssignment",{"range":"174","text":"175"},[237,237]," ",[280,280],[6173,6193],"value || null"]